//
// A mixin to make an img responsive.
// 
// Will grow beyond native width of image unless you specify $full = false.
// 
@mixin loft_images_responsive_img($full: true) {
  height: 100%;
  vertical-align: bottom;
  display: block;
  margin: auto;
  @if $full == true {
    max-width: auto;
    width: 100%;
  }
  @else {
    max-width: 100%;
    width: auto;
  }
}

//
//
// Applies width and height to an image, defaulting to the native dimensions.
//
@mixin loft_images_dimensions($filename, $dimensions: null) {
  @if length($dimensions) == 2 {
    width: nth($dimensions, 1);
    height: nth($dimensions, 2);
  }
  @else {  
    width: image-width($filename);
    height: image-height($filename);
  }
}

//
// Apply height/width to an element to maintain an aspect ratio.
// 
// @code 
//   <div class="parent"><div></div></div>
// 
//   .parent {
//     @include aspect_ratio(4, 3);
//   }
// @endcode
// 
// @param number $x May be a ratio like .65 or the x value of a ratio, e.g. 4
// @param number $y Optional Use if passing a ratio as two numbers; the y value.
// @param string $selector Use to target the inner element.
//
@mixin loft_images_aspect_ratio($x, $y: null, $inner: ">div") {
  $ratio: $x;
  @if $y {
    $ratio: $y / $x;  
  }
  width: 100%;
  position: relative;
  height: 0;
  padding: $ratio * 100% 0 0 0;
  overflow: hidden;
  #{$inner} {
    @include loft_images_aspect_ratio_inner; 
  }
}

//
//
// Helper to 'loft_images_aspect_ratio', if .inner is not a direct child or is called
// something other than .inner
//
@mixin loft_images_aspect_ratio_inner() {
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin loft_images_un_aspect_ratio_inner() {
  position: initial;
  display: initial;
  top: initial;
  left: initial;
  width: initial;
  height: initial;
}

//
//
// Usage:
//   &.is-not-hover &__image-overlay {
//     @include loft_images_hover_overlay(0);
//   }
//   &.is-hover &__image-overlay {
//     @include loft_images_hover_overlay(.16);
//   } 
//
@mixin loft_images_hover_overlay($opacity, $speed: .3s, $color: #fff) {
  position: relative;
  &:after {
    content: "";
    @include loft_images_aspect_ratio_inner;
    background-color: $color;
    @include opacity($opacity);
    @if $speed {
      @include transition-duration($speed);  
    }
  }
}
