//
// A mixin to make an img responsive.
// 
// Will grow beyond native width of image unless you specify $full = false.
// 
@mixin loft-images-fluid-img($full: true) {
  height: 100%;
  vertical-align: bottom;
  display: block;
  margin: auto;
  @if $full == true {
    max-width: none;
    width: 100%;
  } @else {
    max-width: 100%;
    width: auto;
  }
}

//
// Applies CSS to make the background image work like and img tag
// 
// @param string $size Defaults to 'cover'.  The background size value.
// 
//
@mixin loft-images-image-background($size: cover) {
  @include fill-parent;
  background-repeat: no-repeat;
  background-position: center;
  background-size: unquote($size);
}

//
//
// Applies width and height to an image, defaulting to the native dimensions.
//
@mixin loft-images-dimensions($image_path, $dimensions: null) {
  $_dimensions: _loft-images-dimensions($image_path, $dimensions);
  width: nth($_dimensions, 1);
  height: nth($_dimensions, 2);
}

//
// Returns the natural image dimensions of a file or passthru.
// 
// @param string $image_path Includes the extension.
// @param list $dimensions Expecting 2 values w, h or null.
//
@function _loft-images-dimensions($image_path, $dimensions: null) {
  @if length($dimensions) == 2 {
    @return $dimensions;
  }

  @return (image-width($image_path), image-height($image_path));
}

//
// Apply height/width to an element to maintain an aspect ratio of a child.
// 
// @param number $x May be a ratio like .65 or the x value of a ratio, e.g. 4
// @param number $y Optional Use if passing a ratio as two numbers; the y value.
// @param string $selector Use to target the inner element; this will be written
//   as the parent plus this selector so it may be too specific.  You can also
//   send null and use loft-images-fill-parent() mixin instead.
//
// @code 
//   <div class="wrapper"><div class="content"></div></div>
// 
//   .wrapper {
//     @include aspect-ratio(4, 3);
//   }
// @endcode
// 
// In the above example, .wrapper will be given 100% width.  .wrapper>div will
// be positioned inside of .wrapper and will have a width and height that
// maintains the aspect ratio as the width of .wrapper changes.
// 
// Be aware that you can apply this to nested grandchildren, as in this
// example: 
// 
// @code
//   <div class="shape">
//     <a href="" class="image-wrapper">
//       <img class="image" src="fish.jpg" alt="A fish"/>
//     </a>
//   </div>
//   
//   .shape {
//     @include aspect-ratio(16, 9, '>a, .image');
//   }
// @endcode
// 
@mixin loft-images-aspect-ratio($x, $y: null, $inner: ">div") {
  $ratio: $x;
  @if $y {
    $ratio: $y / $x;
  }
  width: 100%;
  position: relative;
  height: 0;
  padding: $ratio * 100% 0 0 0;
  overflow: hidden;
  @if $inner {
    #{$inner} {
      @include loft-images-fill-parent;
    }
  }
}

//
//
// Positions element to completely fill its parent container matching
// height and width.
//
// @param string $position Default to absolute.
//
@mixin loft-images-fill-parent($position: absolute) {
  position: $position;
  display: block;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin loft-images-un-aspect-ratio_inner() {
  position: initial;
  display: initial;
  top: auto;
  left: auto;
  width: auto;
  height: auto;
}

//
// Create an overlay div as a child of parent.
// 
// @param float $opacity 0-1
// @param string $position One of:
//   - relative, absolute, null, etc...
// @param float $speed As used in a transition duration directive.
// @param hex $color Of the overlay.
//
// Usage:
//   &.is-not-hover &__image-overlay {
//     @include loft-images-hover_overlay(0);
//   }
//   &.is-hover &__image-overlay {
//     @include loft-images-hover_overlay(.16);
//   } 
//
@mixin loft-images-hover_overlay($opacity, $position: $loft-images-hover_overlay_position_default, $speed: $loft-images-hover_overlay_speed_default, $color: $loft-images-hover_overlay_color_default) {

  @if type-of($position) == 'string' {
    position: unquote($position);
  }

  &:after {
    content: "";
    @include loft-images-fill-parent;
    background-color: $color;
    @include opacity($opacity);
    @if $speed {
      @include transition-duration($speed);
    }
  }
}

// $bg_pos: one of:
// - left|center|right|units top|center|bottom|units
// - right units bottom units
// In CSS3, we can specify up to four values for background-position. The first two values represent the horizontal axis. The second two values represent the vertical axis.

@mixin loft-images-smart-background($filename, $bg_pos, $gap: 0) {
  $_padding--v: null;
  $_padding--h: null;
  $_height: image-height($filename);

  // Try to make sense of a string.
  @if type-of($bg_pos) == 'string' {
    $_split: str-index($bg_pos, ' ');
    @if $_split {
      $bg_pos: (str-slice($bg_pos, 0, $_split - 1), str-slice($bg_pos, $_split + 1));
    } @else {
      $bg_pos: ($bg_pos, 'center');
    }
  }

  @if type-of($bg_pos) != 'list' {
    @warn 'bg_pos argument should be a list, e.g., 10px bottom';
  }

  // Decide if we have 4 or 2 values
  //@debug 'pass';
  $_pos--h: nth($bg_pos, 1);
  $_pos--v: nth($bg_pos, 2);
  $_padding--h: ();
  $_padding--v: ();

  // four value format
  @if length($bg_pos) > 2 {
    $_padding--h: nth($bg_pos, 1);
    $_pos--h: nth($bg_pos, 2);
    $_padding--v: nth($bg_pos, 3);
    $_pos--v: if (index($bg_pos, 4), th($bg_pos, 4), 0);
  }

    // older, two value format
  @else {
    @if $_pos--h {
      @if $_pos--h != 'center' {
        $_padding--h: "left";
      }
      // @if $_pos--h == 'center' {
      //   $_padding--h: "left" "right";
      // }
      @if $_pos--h == 'right' {
        $_padding--h: "right";
        $_pos--h: 0;
      } @else if $_pos--h == 'left' {
        $_pos--h: 0;
      }
    }
    @if $_pos--v {
      @if $_pos--v != 'center' {
        $_padding--v: "top";
      }
      @if $_pos--v == 'bottom' {
        $_padding--v: "bottom";
        $_pos--v: 0;
      } @else if $_pos--v == 'top' {
        $_pos--v: 0;
      }
    }
  }

  @if $_padding--h != null {
    $_gap: $gap + $_pos--h;
    $_width: image_width($filename);
    @each $_attr in $_padding--h {
      @if $gap == 0 or unit($gap) == 'px' {
        padding-#{$_attr}: $_width + $_gap;
      } @else {
        padding-#{$_attr}: calc(#{$_width} + #{$_gap});
      }
    }
  }

  @if $_padding--v != null {
    $_gap: $gap + $_pos--v;
    @each $_attr in $_padding--v {
      @if $gap == 0 or unit($gap) == 'px' {
        padding-#{$_attr}: $_height + $_gap;
      } @else {
        padding-#{$_attr}: calc(#{$_height} + #{$_gap});
      }
    }
  }

  @if $_padding--v == null {
    line-height: $_height;
  }
}

@mixin loft-images-background-position($position) {
  @if $position {
    @if typeof
    $position == 'list' {
    $position: loft-images-implode($position, ' ');
  } background-position: unquote($position);
  }
}

@function loft-images-implode($list, $glue: '', $is_nested: false) {
  $result: null;
  @for $i from 1 through length($list) {
    $e: nth($list, $i);
    @if type-of($e) == list {
      $result: $result#{loft-images-implode($e, $glue, true)};
    } @else {
      $result: if($i != length($list) or $is_nested, $result #{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}

@function _loft-images-basename($filename, $fallback_ext: null) {
  $fallback_ext: $loft-images-svg_fallback_extension !default;
  @return "#{$filename}.#{$fallback_ext}";
}

