//
//
// Adds css (bg, height, width) to use an svg icon with png fallback.
// 
// @param $filename string Must be in the compass images folder; do not include
//   the extension.
// @param $fallback_ext string Defines the extension for the fallback image.
// 
// Where icon.png and icon.svg exist in the images folder.
// @code
//   html: <div class="icon"></div>
//   sass: @include svg_icon('icon'); or @include svg_icon('icon', 'png');
// @endcode
// 
// If the files are icon.gif and icon.svg then do this:
// @code
//   html: <div class="icon"></div>
//   sass: @include svg_icon('icon', 'gif');
// @endcode
// 
// @see svg_background
// @depends Modernizr.svg
//
@mixin loft_images_svg_icon($filename, $fallback_ext: null, $dimensions: null) {
  $fallback_ext: $loft_images_svg_fallback_extension !default;
  $_fallback: "#{$filename}.#{$fallback_ext}";
  @include loft_images_svg_background($filename, 'center', $fallback_ext);
  display: block;
  @include loft_images_dimensions($_fallback, $dimensions);
  background-size: contain;
}

//
//
// Use an svg as a background-image with raster fallback.
// 
// This does not worry about retina raster because a device that supports
// svg should also be retina so it would never fallback to the retina raster.
// 
// Consider using svg_icon instead if the element is only serving as an icon.
// This comes in handy if you're decorating, say, a title with an bg image.
// 
// * The raster image will only be downloaded if Modernizr does not detect 
// svg support.
// * The svg file will be written as a Data URI in the stylesheet, reducing the
// http requests for the page.
// 
// @param $filename string Must be in the compass images folder; do not include
//   the extension.
// @param $bg_pos string The background-position declaration.
// @param string $fallback_ext Usually png; omit the dot.
// 
// Where icon.png and icon.svg exist in the images folder, and have the natural
// size of 20px x 20px...
// 
// @code
//   html: <div class="icon"></div>
//   sass: @include loft_images_svg_background('icon', 'center', 20px, 20px);
// @endcode
// 
// @depends Modernizr.svg
//
@mixin loft_images_svg_background($filename, $bg_pos: 'center', $fallback_ext: null) {
  $fallback_ext: $loft_images_svg_fallback_extension !default;
  // Embeds our svg as a data uri to eliminate an http request.
  background-repeat: no-repeat;
  @if $bg_pos {
    background-position: #{$bg_pos};
  }
  background-image: inline-image("#{$filename}.svg", "image/svg+xml");
  html.modernizr-no-svg & {
    // Will only load this if modernizr detects no svn support.
    background-image: image-url("#{$filename}.#{$fallback_ext}");
  }
}

//
//
// Automatically applies padding based on image size (+gap) so the bg is not
// covered by the element content.
// 
// USE THIS WHEN YOU WANTING TO PLACE AN SVG IN A BACKGROUND OF SOMETHING LIKE
// A TITLE ELEMENT THAT HAS SPACE BEYOND THE ICON.
// 
// @param string $filename Without the extension.
// @param string $bg_pos Will be passed to background-position:
// @param unit $gap The gap between the icon and the content.
// @param string $fallback_ext Usually png; omit the dot.
// 
// To place an icon (alert.svg/alert.png) on the left of a title, where
// the icon has a 10px left margin and a 10px gap, try:
// @code
//   h1 {
//     loft_images_svg_smart_background('alert', (10px, center), 10px);
//   }
// @endcode
//
@mixin loft_images_svg_smart_background($filename, $bg_pos: center, $gap: 0, $fallback_ext: null) {
  $fallback_ext: $loft_images_svg_fallback_extension !default;
  @include loft_images_svg_background($filename, $bg_pos, $fallback_ext);
  
  $_padding--v: null;
  $_padding--h: null;
  $_pngFile: "#{$filename}.#{$fallback_ext}";
  $_height: image_height($_pngFile);

  // Try to make sense of a string.
  @if type_of($bg_pos) == 'string' {
    $_split: str-index($bg_pos, ' ');
    @if $_split {
      $bg_pos: (str-split($bg_pos, 0, $_split), str-split($bg_pos, $_split + 1));  
    }
    @else {
      $bg_pos: ($bg_pos, $bg_pos, )
    }
  }

  @if type_of($bg_pos) != 'list' {
    @warn 'bg_pos argument should be a list, e.g., 10px bottom';
  }

  $_pos--h: nth($bg_pos, 1);
  $_pos--v: nth($bg_pos, 2);
  $_padding--h: ();
  $_padding--v: ();

  @if $_pos--h {
    @if $_pos--h != 'center' {
      $_padding--h: "left";
    }
    // @if $_pos--h == 'center' {
    //   $_padding--h: "left" "right";
    // }
    @if $_pos--h == 'right' {
      $_padding--h: "right";
    }
  }
  @if $_pos--v {
    @if $_pos--v != 'center' {
      $_padding--v: "top";  
    }
    // @if $_pos--v == 'center' {
    //   $_padding--v: "top" "bottom";
    // }
    @if $_pos--v == 'bottom' {
      $_padding--v: "bottom";
    }
  }
  
  @if $_padding--h != null {
    $_gap: $gap + $_pos--h;
    $_width: image_width($_pngFile);
    @each $_attr in $_padding--h {
      @if unit($gap) == 'px' {
        padding-#{$_attr}: $_width + $_gap;
      }
      @else {
        padding-#{$_attr}: calc(${$_width} + #{$_gap});
      }
    }
  }
  @if $_padding--v != null {
    $_gap: $gap + $_pos--v;
    @each $_attr in $_padding--v {
      @if unit($gap) == 'px' {
        padding-#{$_attr}: $_height + $_gap;
      }
      @else {
        padding-#{$_attr}: calc(${$_height} + #{$_gap});
      }
    }
  }

  @if $_padding--v == null {
    line-height: $_height;
  }    

}
