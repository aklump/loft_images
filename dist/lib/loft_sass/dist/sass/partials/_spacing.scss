//
// Sets the padding for left and right without touching other axis values.
// 
// @param list|unit $padding
// 
@mixin hpadding($padding) {
  $_left: $padding;
  $_right: $padding;
  @if type-of($padding) == 'list' {
    $_left: nth($padding, 1);
    $_right: $_left;
    @if length($padding) > 1 {
      $_right: nth($padding, 2);
    }
  }
  @include loft-sass-rem-fallback('padding-left', $_left);
  @include loft-sass-rem-fallback('padding-right', $_right);
}

//
// Sets the padding for top and bottom without touching other axis values.
// 
// @param list|unit $padding
// 
@mixin vpadding($padding) {
  $_top: $padding;
  $_bottom: $padding;
  @if type-of($padding) == 'list' {
    $_top: nth($padding, 1);
    $_bottom: $_top;
    @if length($padding) > 1 {
      $_bottom: nth($padding, 2);
    }
  }
  @include loft-sass-rem-fallback('padding-top', $_top);
  @include loft-sass-rem-fallback('padding-bottom', $_bottom);
}

//
// Sets the margin for left and right without touching other axis values.
// 
// @param list|unit $margin
// 
@mixin hmargin($margin) {
  $_left: $margin;
  $_right: $margin;
  @if type-of($margin) == 'list' {
    $_left: nth($margin, 1);
    $_right: $_left;
    @if length($margin) > 1 {
      $_right: nth($margin, 2);
    }
  }
  @include loft-sass-rem-fallback('margin-left', $_left);
  @include loft-sass-rem-fallback('margin-right', $_right);
}

//
// Sets the margin for top and bottom without touching other axis values.
// 
// @param list|unit $margin
// 
@mixin vmargin($margin) {
  $_top: $margin;
  $_bottom: $margin;
  @if type-of($margin) == 'list' {
    $_top: nth($margin, 1);
    $_bottom: $_top;
    @if length($margin) > 1 {
      $_bottom: nth($margin, 2);
    }
  }
  @include loft-sass-rem-fallback('margin-top', $_top);
  @include loft-sass-rem-fallback('margin-bottom', $_bottom);
}

//
//
// Makes an element centered.
//
@mixin center() {
  display: block;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}

//
// Convert pixels to inches
// 
// @param float $inches
// 
// @return float The value in pixels.
// 
@function inches-to-px($inches) {
  @return ($inches * $inches_to_px_dpi) * 1px;
}

//
//
// Mixin to vertically align a child inside of the selected.
// 
// @param string $childSelector This child will be vertically centered
//   inside of the element.
// @param string $spacerSelector Unless this is null, a pseudo element
//   will be created at 100% to set the alignment.  Use 'default' to include
//   the default selector.  IF YOU ARE PASSING A THIS ELEMENT, YOU DO NOT NEED TO HAVE THIS BE INSIDE A PARENT.
// @param percent $offsetPercentage You can move center by a percentage amount
//   where 10% would shift the center down by 10% of the height and -10%
//   would move the center point up by 10%;
// 
// - You must specify a height on the selected element!
// - Children cannot be floated or it won't work!
// - Works best with a single child, or when all siblings are absolutely
//   positioned.
// 
// <div class="titling"><div class="title">Title</div></div>
// 
//   .titling {
//     @include vcenter_child('.title');
//   }
//
@mixin vcenter-child($childSelector: '>div', $spacerSelector: 'default', $offsetPercentage: 0) {
  @if $spacerSelector {

    @if $spacerSelector == 'default' {
      $spacerSelector: "&:before";
    }
    $_height: 100% + 2 * $offsetPercentage;

    #{$spacerSelector} {
      content: '';
      display: inline-block;
      height: $_height;
      vertical-align: middle;
      margin-right: -0.25em;
    }
  }

  #{$childSelector} {
    @include vcenter_child_inner;
  }
}

@mixin vcenter-child-inner() {
  display: inline-block;
  vertical-align: middle;
  // width: 100%;
}

@mixin un-vcenter-child($childSelector: '>div', $spacerSelector: '&:before') {
  @if $spacerSelector {
    #{$spacerSelector} {
      content: none;
    }
  }

  #{$childSelector} {
    display: initial;
    vertical-align: initial;
    width: initial;
  }
}
